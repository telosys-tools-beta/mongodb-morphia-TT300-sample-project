#foreach( $attribute in $entity.keyAttributes )
#set( $keyAttribute = $attribute )
#end
/*
 * Java bean class
 * Created on $today.date ( Date ISO $today.date("yyyy-MM-dd") - Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */

package ${target.javaPackageFromFolder(${SRC})};

import java.io.Serializable;

#foreach( $import in $java.imports($entity.attributes) )
import $import;
#end

import com.mongodb.DBObject;
import com.mongodb.Mongo;
import com.mongodb.MongoClient;
import com.mongodb.QueryBuilder;
import org.mongodb.morphia.Datastore;
import org.mongodb.morphia.Morphia;

import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;

import ${ENTITY_PKG}.${entity.name};

/**
 * DAO : ${entity.name}s
 *
 * @$entity.name Telosys Tools Generator
 *
 */
public class ${entity.name}Dao {

    public static String COLLECTION = "${entity.name}s";

    private final String host;
    private final Integer port;
    private final String databaseName;

    public ${entity.name}Dao(String host, Integer port, String databaseName) {
        this.host = host;
        this.port = port;
        this.databaseName = databaseName;
    }

    private Datastore get${entity.name}Datastore() {
        try {
            MongoClient mongo = new MongoClient(this.host, this.port);
            Datastore ds = new Morphia().createDatastore(mongo, this.databaseName);
            return ds;
        } catch (UnknownHostException e) {
            throw new RuntimeException(e);
        }
    }

    public void save(${entity.name} ${fn.uncapitalize($entity.name)}) {
        get${entity.name}Datastore().save(${fn.uncapitalize($entity.name)});
    }

    public void remove(${entity.name} ${fn.uncapitalize($entity.name)}) {
        get${entity.name}Datastore().delete(${fn.uncapitalize($entity.name)});
    }

    public List<${entity.name}> findAll() {
        List<${entity.name}> ${fn.uncapitalize($entity.name)}s = get${entity.name}Datastore().find(${entity.name}.class).asList();
        return ${fn.uncapitalize($entity.name)}s;
    }

#foreach( $attribute in $entity.attributes )
    public ${entity.name} findBy${fn.capitalize($attribute.name)}(${attribute.type} ${attribute.name}) {
        ${entity.name} ${fn.uncapitalize($entity.name)} = get${entity.name}Datastore().find(${entity.name}.class, "${attribute.name}", ${attribute.name}).get();
        return ${fn.uncapitalize($entity.name)};
    }

#end

}
