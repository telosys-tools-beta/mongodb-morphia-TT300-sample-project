#foreach( $attribute in $entity.keyAttributes )
    #set( $keyAttribute = $attribute )
#end
/*
 * Java bean class
 * Created on $today.date ( Date ISO $today.date("yyyy-MM-dd") - Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */

package ${target.javaPackageFromFolder(${TEST_SRC})};

#foreach( $import in $java.imports($entity.attributes) )
import $import;
#end

import com.mongodb.MongoClient;
import de.flapdoodle.embed.mongo.MongodExecutable;
import de.flapdoodle.embed.mongo.MongodProcess;
import de.flapdoodle.embed.mongo.MongodStarter;
import de.flapdoodle.embed.mongo.config.IMongodConfig;
import de.flapdoodle.embed.mongo.config.MongodConfigBuilder;
import de.flapdoodle.embed.mongo.config.Net;
import de.flapdoodle.embed.mongo.distribution.Version;
import de.flapdoodle.embed.process.runtime.Network;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import ${ENTITY_PKG}.${entity.name};
import ${ROOT_PKG}.dao.${entity.name}Dao;

/**
 * Test : DAO : ${entity.name}
 *
 * @author Telosys Tools Generator
 *
 */
public class ${entity.name}DaoTest {

    String HOST = "localhost";
    Integer PORT = 12345;
    String DATABASE = "test";

    ${entity.name}Dao ${fn.uncapitalize($entity.name)}Dao = new ${entity.name}Dao(HOST, PORT, DATABASE);

    /**
     * Mongo in memory
     */
    MongodExecutable mongodExecutable;

    /**
     * Initialize MongoDB with Java client
     */
    @Before
    public void setUp() throws Exception {

        MongodStarter starter = MongodStarter.getDefaultInstance();

        IMongodConfig mongodConfig = new MongodConfigBuilder()
            .version(Version.Main.DEVELOPMENT)
            .net(new Net(PORT, Network.localhostIsIPv6()))
            .build();

        this.mongodExecutable = starter.prepare(mongodConfig);
        this.mongodExecutable.start();
    }

    @After
    public void after() {
        if (this.mongodExecutable != null) {
            this.mongodExecutable.stop();
        }
    }

    @Test
    public void test() {
        // Given
        ${entity.name} ${fn.uncapitalize($entity.name)} = new ${entity.name}();
#foreach( $attribute in $entity.attributes)
#if( ${fn.uncapitalize($attribute.type)} == "string")
        ${fn.uncapitalize($entity.name)}.${attribute.setter}("${fn.uncapitalize($attribute.name)}");
#end
#if( ${fn.uncapitalize($attribute.type)} == "integer")
        ${fn.uncapitalize($entity.name)}.${attribute.setter}(1);
#end
#end

        // Save
        ${fn.uncapitalize($entity.name)}Dao.save(${fn.uncapitalize($entity.name)});

        // Find by id
        ${entity.name} ${fn.uncapitalize($entity.name)}Saved = ${fn.uncapitalize($entity.name)}Dao.findBy${fn.capitalize($keyAttribute.name)}(${fn.uncapitalize($entity.name)}.${keyAttribute.getter}());

        // Then
#foreach( $attribute in $entity.attributes)
#if( ${fn.uncapitalize($attribute.type)} == "string")
        Assert.assertEquals("${fn.uncapitalize($attribute.name)}", ${fn.uncapitalize($entity.name)}Saved.${attribute.getter}());
#end
#if( ${fn.uncapitalize($attribute.type)} == "integer")
        Assert.assertEquals(Integer.valueOf(1), ${fn.uncapitalize($entity.name)}Saved.${attribute.getter}());
#end
#end

        // Delete
        ${fn.uncapitalize($entity.name)}Dao.remove(${fn.uncapitalize($entity.name)}Saved);

        // Find by id
        ${entity.name} ${fn.uncapitalize($entity.name)}Deleted = ${fn.uncapitalize($entity.name)}Dao.findBy${fn.capitalize($keyAttribute.name)}(${fn.uncapitalize($entity.name)}.${keyAttribute.getter}());

        // Then
        Assert.assertNull(${fn.uncapitalize($entity.name)}Deleted);
    }

}
